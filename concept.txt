import java.util.Random;
import java.util.Scanner;

//class name can be anything, but it must be defined in its own file.
public class nimgame {

		public static void main(String[] args) {
			//Core gameplay values, all integers. The Piles range from +100 to +4.
			int PileA, PileB, PileC, jackpot;
			//Values representing the amount of money owned by each player.
			int player1, player2;
			//Value representing whether or not the game is actively accepting input.
			boolean interaction = true;
			//Instance of a scanner object, which we can use to take player input.
			Scanner keyboard = new Scanner(System.in);
			//Variables to control the while loop.
			String choice, quit;
			quit = "";
			//quit is declared before use so we can refer to length in a while loop
			//we would not need to declare it if we used a do...while() loop instead

			System.out.print("Welcome to NIM!\n");
			while (quit.length() < 1) {
				System.out.println("Setting up new game...\n");

				//This code block sets up an instance of the game.
				PileA = newPile();
				PileB = newPile();
				PileC = newPile();
				jackpot = newJackpot();

				//game "rendering"; now that values are set up, time to display them.
				showPiles(PileA, PileB, PileC);
				showJackpot(jackpot);

				//While loop that runs until the player has taken a turn.
				while (interaction == true) {
					//TODO: SET UP ACTIVE PILE
					//TODO: CODE
					//Take from the active pile.
					System.out.printf("Take from pile %s?", "A");
					choice = keyboard.nextLine();
					/*We will need to validate here to make sure choice is
					1, an integer and 2, ranging from 1 to 3.
					anything else, we need to switch piles and present another choice
					the player has no choice but to take the jackpot if available
					we should validate for that as well*/
					if (choice.length() > 0) {
						//Take value of choice from the relevant pile.
						interaction = false;
					} else {
						//player entered an inactive value, so we switch to the next pile
					}
				}
			}
				
				System.out.println("Press enter to generate again? ");
				quit = keyboard.nextLine();
		}

		/**
		 * showPiles(); is visually cleaner than the messy printf below
		 * we use this function to ensure that only logic appears in the main function
		 * showPiles() itself displays the value of each file.
		 */
		public static void showPiles(int A, int B, int C) {
			System.out.printf("Pile 1: %d\nPile 2: %d\nPile 3: %d\n", A, B, C);
		}

		/**
		 * 
		 * showJackpot() is used for the same reason as showPiles()
		 * showJackpot formats the jackpot and displays it.
		 * if we can, we want the main function to only contain game logic
		 */
		public static void showJackpot(int jackpot) {
			//Preformatting to prevent ugly stuff like "$-38 dollars"
			String format_pot = ("$" + Math.abs(jackpot));
			if (jackpot < 0) {
				format_pot = ("-" + format_pot);
			}
			System.out.printf("\nThe jackpot is %s dollars.\n", format_pot);
		}
		
		/**
		 * newPile() creates a random number from 104 to 4, and returns it
		 * we use this function to create each of the "piles"
		 * Random().nextInt returns a random integer from 100 to 0
		 * we don't want to have a pile with nothing in it(not to start with) so,
		 * I decided to give it a minimum value; outputs now range from 104 to 4
		 */
		public static int newPile() {
			Random rando = new Random();
			int x = rando.nextInt(100) + 4;
			return x;
		}
		
		/**
		 * newJackPot() creates a random number from -300 to 600, and returns it
		 * we use this function to create the integer "jackpot"
		 * we start with a random number from 300 to 1
		 * then, we either make it negative or multiply by 2
		 */
		public static int newJackpot() {
			Random rando = new Random();
			int base = rando.nextInt(300) + 1;
			switch (rando.nextInt(2)) {
				case 1:
					base *= -1;
					break;
				case 2:
					base *= 2;
			}
			return base;
		}

}
